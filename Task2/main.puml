@startuml Архитектура_АгроТех_Системы_v4_c2

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
' === Участники ===
Person(зоотехник, "Зоотехник", "Следит за животными")
Person(директор, "Директор хозяйства", "Управление через веб-портал")
Person(механик, "Механик", "Мониторинг техники")
Person(дежурный_оператор, "Дежурный оператор", "Управление оффлайн-уведомлениями")

System_Boundary(mvp_интерфейсы, "MVP Платформа Мониторинга Скота") {
    System_Ext(веб_портал, "Веб-портал", "Angular", "REST API")
    System_Ext(мобильное_приложение, "Мобильное приложение", "Flutter", "REST API")
}

System_Boundary(mvp_границы, "Границы MVP для ферм") {
    Container_Boundary(auth_ctx, "Авторизация") {
        Container(api_auth, "Сервер авторизации и аутентификации", "Keycloak/Node.js", "OAuth/JWT для ролей")
    }

    Container_Boundary(iot_платформа, "IoT платформа") {
        Container(iot_шлюз, "IoT шлюз", "Node-RED", "Сбор данных с загонов, состояние фильтров, кормушек, поилок")
        Container(видео_камеры, "Видео камеры", "", "Отслеживание поведения и состояния животных")
    }

    Container_Boundary(хранилище, "Хранилище данных фермы") {
        ContainerDb(minio, "S3", "MinIO", "Хранилище данных для видео")
        ContainerDb(postgresql, "PostgreSQL", "SQL", "Хранилище ID видео, метрики (поголовья/запасов)")
    }

    Container_Boundary(analysis_ctx, "Аналитика") {
        Container(аналитика, "Аналитический модуль", "Python+Spark", "Анализ эффективности")
    }

    Container_Boundary(monitoring_ctx, "Мониторинг") {
        Container(prometheus, "Монитеринг", "Prometheus", "Метрики/алерты")
    }

    Container(rabbitmq, "Брокер сообщений", "RabbitMQ", "Буфер событий")

    Container(пушер, "Push уведомления", "MQTT + Mobile App", "Отправка push-уведомлений")


    ' === Внешние системы системы ===
    System_Ext(агенты_фермы, "Агенты на фермах", "Edge-устройства (камеры, датчики)", "Оффлайн-работа с кешированием")
}

' === Внутренние системы ===
System(аграрная_платформа, "АгроПром Х - Цифровая платформа", "Платформа", "Микросервисная архитектура")

' === Связи ===
Rel(iot_шлюз, агенты_фермы, "Передача данных", "Передаются данные датчиков")
Rel(видео_камеры, агенты_фермы, "Передача данных", "Передаются видео")
Rel(агенты_фермы, minio, "Сохранение данных", "Сохраняет видео в хранилище")
Rel(агенты_фермы, postgresql, "Сохранение данных", "Сохраняет ID видео и метрики")
Rel(minio, аналитика, "Доступ к сырым данным", "Файл")
Rel(postgresql, аналитика, "Доступ к структурированным данным", "SQL")
Rel(аналитика, веб_портал, "Формирует рекомендации", "REST API")
Rel(аналитика, мобильное_приложение, "Формирует рекомендации, отображает данные", "REST API")
Rel(аналитика, аграрная_платформа, "Передача метрик", "Kafka Protocol")
Rel(агенты_фермы, пушер, "Оповещает", "Push, <5 сек оффлайн")
Rel(пушер, зоотехник, "Оповещает", "Оповещения о событиях")
Rel(пушер, дежурный_оператор, "Оповещает", "Оповещения о событиях")
Rel(зоотехник, api_auth, "Аутентификация", "OAuth")
Rel(директор, api_auth, "Аутентификация", "OAuth")
Rel(механик, api_auth, "Аутентификация", "OAuth")
Rel(дежурный_оператор, api_auth, "Аутентификация", "OAuth")
Rel_L(api_auth, мобильное_приложение, "Токен", "JWT")
Rel_L(api_auth, веб_портал, "Токен", "JWT")
Rel(агенты_фермы, rabbitmq, "События", "MQTT; риск WiFi — LoRaWAN")
Rel(rabbitmq, аналитика, "Обработка", "AMQP")
Rel(rabbitmq, пушер, "Триггер уведомлений", "AMQP")
Rel_R(аналитика, prometheus, "Метрики", "HTTP")
Rel_R(rabbitmq, prometheus, "Метрики очередей", "HTTP")
Rel_R(api_auth, prometheus, "Метрики", "HTTP")
Rel_R(пушер, prometheus, "Метрики", "HTTP")
Rel_R(postgresql, prometheus, "Метрики БД", "HTTP")
Rel_R(minio, prometheus, "Метрики хранения", "HTTP")
Rel_L(prometheus, пушер, "Алерты о сбоях", "AMQP")
Rel_L(iot_шлюз, prometheus, "Метрики шлюза", "HTTP")

@enduml