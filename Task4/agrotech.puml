@startuml Архитектура_АгроТех_Системы_v4

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

' === Участники ===
Person(зоотехник, "Зоотехник", "Следит за животными")
Person(директор, "Директор хозяйства", "Управление через веб-портал")
Person(агроном, "Агроном", "Использует мобильное приложение")
Person(тепличник, "Фермерский комплекс", "Управление фермой")
Person(механик, "Механик", "Мониторинг техники")

' Person(аналитик, "Аналитик", "Работа с BI-системой")

Container(kafka2, "Брокер сообщений", "Apache Kafka", "Шина данных", "#FF6B6B")

System_Boundary(платформа, "АгроПром Х - Цифровая платформа") {
    Container(веб_портал, "Веб-портал", "React", "Управление хозяйством")
    Container(мобильное_приложение, "Мобильное приложение", "Flutter", "Полевые работы")
    ContainerDb(erp, "ERP система (1С:Агро)", "1С", "Финансы, склад")

    Container_Boundary(фермерские_системы, "Фермерский комплексы") {
        Container(scada, "SCADA система", "Ignition", "Управление климатом")
        Container(фермерские_датчики, "Фермерские датчики", "Python", "Микроклимат, полив")
        Container(автокормление, "Система автокормление", "C++", "Управление едой")
    }

    Container(kafka, "Брокер сообщений", "Apache Kafka", "Шина данных", "#FF6B6B")

    Container_Boundary(iot_платформа, "IoT платформа") {
        Container(iot_шлюз, "IoT шлюз", "Node-RED", "Сбор данных с загонов")
        Container(tsdb, "База временных рядов", "TimescaleDB", "Данные датчиков")
        Container(трекер_техники, "Трекер техники", "Java", "Мониторинг фильров воды")
    }

    Container_Boundary(полевые_данные, "Данные с загонов") {
        Container(видео_данные, "Видео камеры", "Python", "Состояние скота")
        ' Container(почва, "Датчики почвы", "Python", "Влажность, состав")
        ' Container(урожайность, "Мониторинг урожая", "Python", "Камера+ИИ на технике")
    }

    Container_Boundary(данные, "Хранилища данных") {
        ContainerDb(data_lake, "Data Lake", "MinIO", "Сырые данные (S3-совместимое)")
        ContainerDb(dwh, "Data Warehouse", "ClickHouse", "Структурированные данные")
    }

    Container(bi, "BI система", "Power BI", "Отчеты и визуализация")
    Container(аналитика, "Аналитический модуль", "Python+Spark", "Анализ эффективности")
}

' === Взаимосвязи ===
Rel(директор, веб_портал, "Использует")
Rel(агроном, мобильное_приложение, "Использует")
Rel(тепличник, scada, "Управляет")
Rel(механик, трекер_техники, "Мониторит")
Rel(аналитик, bi, "Анализирует")

' Центральная Kafka
Rel(iot_шлюз, kafka, "Публикует данные", "Kafka Protocol")
Rel(тепличные_датчики, kafka, "Публикует данные", "MQTT->Kafka")
Rel(трекер_техники, kafka, "Публикует позиции", "Kafka Protocol")
Rel(kafka, data_lake, "Сырые данные", "Kafka Connect+S3")
Rel(kafka, dwh, "Трансформированные данные", "ETL+Airflow")

' Тепличные системы
Rel(scada, kafka, "Публикует климат-данные", "OPC UA->Kafka")
Rel(автополив, scada, "Получает команды", "Modbus TCP")
Rel(тепличные_датчики, scada, "Передает данные", "LoRaWAN")

' Полевые данные
Rel(метео_данные, iot_шлюз, "Передает данные", "LoRaWAN")
Rel(почва, iot_шлюз, "Передает данные", "LoRaWAN")
Rel(урожайность, iot_шлюз, "Передает данные", "4G")

' Управление техникой
Rel(kafka, планировщик, "Поток задач", "Kafka Protocol")
Rel(мониторинг_гсм, dwh, "Сохраняет данные", "ETL")
Rel(диагностика, erp, "Передает данные о ремонтах", "REST API")

' Аналитика
Rel(data_lake, аналитика, "Доступ к сырым данным", "Spark")
Rel(dwh, аналитика, "Доступ к структурированным данным", "SQL")
Rel(аналитика, bi, "Передает отчеты", "ODBC")
Rel(аналитика, веб_портал, "Формирует рекомендации", "WebSocket")

' ERP интеграция
Rel(веб_портал, erp, "Синхронизация данных", "REST API")
Rel(erp, dwh, "Бизнес-данные", "ETL")
Rel(мобильное_приложение, kafka, "Полевые отчеты", "Kafka Protocol")

@enduml